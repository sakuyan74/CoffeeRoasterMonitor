<invoke name="run_terminal_cmd">
<parameter name="command">npm install prisma @prisma/client</parameter>
<parameter name="explanation">PrismaとPrismaクライアントをインストールします</parameter>
<parameter name="is_background">false</parameter>
<parameter name="require_user_approval">true</parameter>
</invoke>

<invoke name="run_terminal_cmd">
<parameter name="command">npx prisma init</parameter>
<parameter name="explanation">Prismaの初期化を行います</parameter>
<parameter name="is_background">false</parameter>
<parameter name="require_user_approval">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">prisma/schema.prisma</parameter>
<parameter name="instructions">豆マスタのスキーマを定義します</parameter>
<parameter name="code_edit">generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bean {
  id          String   @id @default(cuid())
  name        String
  country     String
  region      String?
  farm        String?
  variety     String?
  elevation   Int?
  process     String
  cropYear    String?
  grade       String?
  description String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">lib/prisma.ts</parameter>
<parameter name="instructions">Prismaクライアントのシングルトンインスタンスを作成します</parameter>
<parameter name="code_edit">import { PrismaClient } from '@prisma/client';

const globalForPrisma = global as unknown as { prisma: PrismaClient };

export const prisma = globalForPrisma.prisma || new PrismaClient();

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;
</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">app/api/beans/route.ts</parameter>
<parameter name="instructions">豆マスタのCRUD APIを実装します</parameter>
<parameter name="code_edit">import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { BeanFormData } from '@/lib/types';

// 豆マスタの登録
export async function POST(request: Request) {
  try {
    const data: BeanFormData = await request.json();

    const bean = await prisma.bean.create({
      data: {
        name: data.name,
        country: data.country,
        region: data.region,
        farm: data.farm,
        variety: data.variety,
        elevation: data.elevation,
        process: data.process,
        cropYear: data.cropYear,
        grade: data.grade,
        description: data.description,
        tags: data.tags,
      },
    });

    return NextResponse.json(bean, { status: 201 });
  } catch (error) {
    console.error('豆マスタの登録に失敗しました:', error);
    return NextResponse.json(
      { error: '豆マスタの登録に失敗しました' },
      { status: 500 }
    );
  }
}

// 豆マスタの一覧取得
export async function GET() {
  try {
    const beans = await prisma.bean.findMany({
      orderBy: { createdAt: 'desc' },
    });
    return NextResponse.json(beans);
  } catch (error) {
    console.error('豆マスタの取得に失敗しました:', error);
    return NextResponse.json(
      { error: '豆マスタの取得に失敗しました' },
      { status: 500 }
    );
  }
}
</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">app/beans/new/page.tsx</parameter>
<parameter name="instructions">フォームの送信処理を実装します</parameter>
<parameter name="code_edit">import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { BeanFormData } from '@/lib/types';

export default function NewBeanPage() {
  const [formData, setFormData] = useState<BeanFormData>({
    name: '',
    country: '',
    region: '',
    farm: '',
    variety: '',
    elevation: undefined,
    process: PROCESS_OPTIONS[0],
    cropYear: '',
    grade: '',
    description: '',
    tags: [],
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const response = await fetch('/api/beans', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        throw new Error('登録に失敗しました');
      }

      const bean = await response.json();
      router.push(`/beans/${bean.id}`);
    } catch (error) {
      console.error('エラー:', error);
      alert('登録に失敗しました。もう一度お試しください。');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Button type="submit" disabled={isSubmitting}>
      {isSubmitting ? '登録中...' : '登録する'}
    </Button>
  );
}
</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="run_terminal_cmd">
<parameter name="command">npx prisma migrate dev --name init</parameter>
<parameter name="explanation">データベースにスキーマを反映します</parameter>
<parameter name="is_background">false</parameter>
<parameter name="require_user_approval">true</parameter>
</invoke>

<invoke name="run_terminal_cmd">
<parameter name="command">npm install @vercel/postgres</parameter>
<parameter name="explanation">Vercel Postgresパッケージをインストールします</parameter>
<parameter name="is_background">false</parameter>
<parameter name="require_user_approval">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">.env</parameter>
<parameter name="instructions">PostgreSQLの接続情報を設定します</parameter>
<parameter name="code_edit">DATABASE_URL="postgresql://postgres:password@localhost:5432/coffee"</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">.gitignore</parameter>
<parameter name="instructions">.envファイルをGitの管理対象から除外します</parameter>
<parameter name="code_edit"># dependencies
node_modules

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# IDE
.idea/
.vscode/
*.swp
*.swo

# Prisma
prisma/*.db
prisma/*.db-journal

.cursorrules
</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">vercel.json</parameter>
<parameter name="instructions">Vercel用の設定ファイルを作成します</parameter>
<parameter name="code_edit">{
  "buildCommand": "prisma generate && next build",
  "devCommand": "next dev",
  "installCommand": "npm install",
  "framework": "nextjs"
}
</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="run_terminal_cmd">
<parameter name="command">vercel</parameter>
<parameter name="explanation">Vercelにプロジェクトをデプロイします</parameter>
<parameter name="is_background">false</parameter>
<parameter name="require_user_approval">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">.env.production</parameter>
<parameter name="instructions">本番環境用の環境変数の例を示します</parameter>
<parameter name="code_edit">DATABASE_PROVIDER="postgresql"
DATABASE_URL=${POSTGRES_PRISMA_URL}
</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="run_terminal_cmd">
<parameter name="command">npx prisma db push</parameter>
<parameter name="explanation">開発環境のデータベースにスキーマを反映します</parameter>
<parameter name="is_background">false</parameter>
<parameter name="require_user_approval">true</parameter>
</invoke>

<invoke name="run_terminal_cmd">
<parameter name="command">docker run --name coffee-postgres -e POSTGRES_PASSWORD=password -e POSTGRES_USER=postgres -e POSTGRES_DB=coffee -p 5432:5432 -d postgres:latest</parameter>
<parameter name="explanation">PostgreSQLのDockerコンテナを起動します</parameter>
<parameter name="is_background">false</parameter>
<parameter name="require_user_approval">true</parameter>
</invoke>

<invoke name="run_terminal_cmd">
<parameter name="command">docker --version</parameter>
<parameter name="explanation">Dockerがインストールされているか確認します</parameter>
<parameter name="is_background">false</parameter>
<parameter name="require_user_approval">true</parameter>
</invoke>

<invoke name="run_terminal_cmd">
<parameter name="command">npx prisma studio</parameter>
<parameter name="explanation">Prisma Studioを起動してデータベースの内容を確認できます</parameter>
<parameter name="is_background">false</parameter>
<parameter name="require_user_approval">true</parameter>
</invoke> 